//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;
//using UnityEngine;


//class RoomGenerationController : MonoBehaviour
//{

//    // Room Generation Point Cloud Prefab
//    private MeshController m_meshController;



//    // Stores list of current mesh objects
//    private List<GameObject> m_MeshObjects = new List<GameObject>();

//    void Awake()
//    {
//        m_meshController = gameObject.GetComponentInChildren<MeshController>();
//    }

//    void Start()
//    {
//        if (m_meshController == null)
//        {
//            throw new Exception("MeshController can not be null (RoomGenerationControllerPrefab)");
//        }
//    }

//    void Update()
//    {

//        if (Input.GetKeyUp(KeyCode.Space))
//        {
//            TakeSnapShot(10);
//        }

//        if (Input.GetKeyUp(KeyCode.T))
//        {
//            RegisterMeshObjects();
//        }
//    }



//    ///////////////////////////////////////////////////////////////
//    ///////////////////////////////////////////////////////////////
//    /// PUBLIC INTERFACE
//    ///////////////////////////////////////////////////////////////
//    ///////////////////////////////////////////////////////////////


//    // High level function to start calibration process
//    public void StartInitialCalibrationProcess()
//    {
//        // TODO: Create object to visualize direction the chair should point
//        // TODO: Give feedback to the user for when to move and when to stop / turn (think guided panorama on phone)
//        // TODO: Collect mesh and register. 
//        // TODO: Determine some stopping criteria when space / mesh is sufficient. 


//    }


//    public void SaveRoomGeometry()
//    {
//        // TODO: Save all mesh data in the m_meshController
//    }

//    public void LoadRoomGeometry()
//    {
//        // TODO: Load the room geometry from memory
//    }

//    // Calibrate the current camera pose with exisiting geometry
//    public MeshController.TransformationParameters RecalibrateCameraWithRoomGeometry()
//    {

//        // TODO: If we load an existing room from memory, it is very likely the that "origin" of the room
//        // and the origin of our current camera is different
//        // TODO: Find an offset (transformation) that moves our current camera origin to match the origin of the room
//        // TODO: we can do this by using the mesh of the room and cross reference it with the mesh in generated by the camera
//        // findng the necessary transform to "reset" our origin. 

//        MeshController.TransformationParameters T;
//        T.R = Quaternion.identity;
//        T.t = Vector3.zero;

//        return T;
//    }


//    ///////////////////////////////////////////////////////////////
//    /// Mesh Generation and Registration
//    ///////////////////////////////////////////////////////////////

//    // Generate a mesh with the spcified number of samples
//    public void TakeSnapShot(int _samples)
//    {
//        if (_samples > 100) _samples = 100;
//        if (_samples < 1) _samples = 1;


//        m_meshController.InstantiateMeshObject(_samples, () => {
            
//            if (m_meshController.GetAcquiredMeshObjects().Count > 2)
//            {
//               //RegisterMeshObjects();
//            }
        
//        });

//    }

//    // Register previous two meshs (Count - 2) is Model mesh
//    public void RegisterMeshObjects() 
//    {
//        m_meshController.RegisterMeshObjects();
//    }

//    // Register mesh objects of model and source index into mesh array
//    public void RegisterMeshObjects(int _modelIndex, int _sourceIndex)
//    {
//        m_meshController.RegisterMeshObjects(_modelIndex, _sourceIndex);
//    }

//}
